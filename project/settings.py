"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from datetime import timedelta
import dj_database_url
from urllib.parse import urlparse
from dotenv import load_dotenv
load_dotenv()


import cloudinary
import cloudinary.uploader
import cloudinary.api


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.insert(0,os.path.join(BASE_DIR,'Apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%rtm!zp(e)beea=(-yw2y!vb0ik$_7gdrk-qi21$7e#7rdv--t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['localhost', 
                 '127.0.0.1',
                 'shortne-backend.onrender.com']
CSRF_TRUSTED_ORIGINS = ['http://localhost:3000',
                        'https://shortne-backend.onrender.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'user_app',
    'post_app',
    'notification_app',
    'interaction_app',
    'message_app',
    'channels',
    "corsheaders",
    'cloudinary',
    'cloudinary_storage',
]

ASGI_APPLICATION = 'project.asgi.application'

#redis channel config
redis_url = os.getenv("REDIS_URL")
parsed = urlparse(redis_url)

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                f"rediss://:{parsed.password}@{parsed.hostname}:{parsed.port}"
            ]
        },
    },
}

# local channel config
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [os.environ.get("REDIS_URL")],
#         },
#     },
# }

AUTH_USER_MODEL = 'user_app.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

# Allow all origins (for development only)

ROOT_URLCONF = 'project.urls'

CORS_ALLOW_ALL_ORIGINS = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# local db config
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'zone_db',
#         'USER':'root',
#         'PASSWORD':'',
#         'OPTIONS': {
#                     'charset': 'utf8mb4',
#                     'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#                     }
#     },
    
# }
# print("ðŸš¨ DATABASE_URL:", os.environ.get("DATABASE_URL"))

# render db
DATABASES = {
    'default': dj_database_url.config(conn_max_age=600)
}

# DATABASES = {
#     'default': {
#         'ENGINE': os.getenv('ENGINE'),
#         'NAME': os.getenv('NAME'),
#         'USER': os.getenv('USER'),
#         'PASSWORD': os.getenv('PASSWORD'),
#         'HOST': os.getenv('HOST'),
#         'PORT': os.getenv('DB_PORT'),
#     }
# }
# print("ENGINE =", os.getenv("ENGINE"))  # should print the correct string
# print("NAME =",os.getenv('NAME'))
# print("USER =",os.getenv('USER'))
# print("HOST =",os.getenv('HOST'))

# Cloud storage

# CLOUDINARY_STORAGE = {
#     'CLOUD_NAME': 'dq8biwq8q',
#     'API_KEY': '332996447824889',
#     'API_SECRET': 'g2fpCYqqRTdcf6FDnbffF3WlNa4'
# }

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET')
}

print("Cloud Name:", os.getenv('CLOUDINARY_CLOUD_NAME'))
print("API Key:", os.getenv('CLOUDINARY_API_KEY'))
print("API Secret:", os.getenv('CLOUDINARY_API_SECRET'))


DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

#MEDIA_URL = '/media/'

# MEDIA_ROOT = os.path.join(BASE_DIR,'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#REST
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.CursorPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'URL_FORMAT_OVERRIDE': None,
}


#JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_BLACKLIST_ENABLED': True,
}


#Sending Email
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'mohanraj.ns777@gmail.com'
EMAIL_HOST_PASSWORD ='tgjn dhkf oslg hyqg'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# # chache
#local
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",  # Make sure same DB is used
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient"
#         }
#     }
# }

#render
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION":  os.getenv("REDIS_URL"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SSL": True,
        }
    }
}

# file size limit

# Limits maximum request size (including file uploads)
DATA_UPLOAD_MAX_MEMORY_SIZE = 21 * 1024 * 1024  # 21 MB

# Limits maximum in-memory file size before writing to disk
FILE_UPLOAD_MAX_MEMORY_SIZE = 5 * 1024 * 1024  # 5 MB (optional for optimization)
